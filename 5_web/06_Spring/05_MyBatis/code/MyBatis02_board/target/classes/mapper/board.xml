<?xml version="1.0" encoding="UTF-8"?>
<!-- DTD(Document Type Definition)
	- 작성한 문서가 어떤 문서인지 정의해 놓은것
	- 하나의 시스템 내에서 사용할 xml 데이터의 구조를 정의하여 유효성 점검시 사용하는 태그
 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boardDao">

	<!-- 전체 게시글 수 가져오기 -->
	<select id="dbCount" resultType="int">
		select count(*) from board
	</select>
	
	<!-- 전체 게시글 리스트 가져오기 -->
	<select id="list" parameterType="pageDto" resultType="boardDto">
		<![CDATA[select * 
				   from (select b.*
				              , row_number() over(order by board_no desc) rnum
				           from board b)
				   where rnum >= ${startNo} and rnum <= #{endNo}]]>
		
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateHit" parameterType="int">
		update board set board_hit = board_hit + 1 where board_no = #{board_no} 
	</update>
	
	<!-- 게시글 상세 리스트 가져오기 -->
	<select id="cont" parameterType="int" resultType="boardDto">
		select * from board where board_no = #{board_no}
	</select>
	
	<!-- 
		일반적으로 DB작업 하다 보면 사전에 어떤 값을 가져와서 해당값을 증가시킨 후 
		입력하거나 입력된 후에 증가값을 가져올 필요가 있는 경우가 많다.
		이런경우 MyBatis에서 제공하는 selectKey 태그를 이용 하면 별도의 쿼리 로직을 사용할 필요 업이 일괄 처리 작업할 수 있다.
		keyProperty 속성 : 해당 결과값이 들어갈 DTO 객체의 멤버 변수명이 오면 된다.
		order 속성 : 해당 쿼리문의 실행 순서를 의미한다.
					- BEFORE : 원래 쿼리문 이전에 selectKey 태그가 실행된다.
					- AFTER : 원래 쿼리문 이후에 selectKey 태그가 실행된다.
		주의사항 : 반드시 멤버 변수에 해당하는 setter()와 getter() 메서드가 존재해야한다.
	 -->
	<!-- 게시글 등록 -->
	<insert id="insert" parameterType="boardDto">
	
		<selectKey resultType="int" keyProperty="board_no" order="BEFORE">
			select max(board_no) from board
		</selectKey>
		
		insert into board values(
			#{board_no} + 1,
			#{board_writer}, #{board_title}, #{board_cont},
			#{board_pwd}, default, sysdate, ''
		)
	</insert>
	
	<!-- 게시글 수정 -->
	<update id="update" parameterType="boardDto">
		update board 
		   set board_title = #{board_title},
		       board_cont = #{board_cont}
		 where board_no = #{board_no} 
	</update>
	
	<!-- 게시글 삭제 -->
	<delete id="delete">
		delete from board where board_no = #{board_no}
	</delete>
	
	<!-- 비밀번호 가져오기 -->
	<select id="dbpwd" parameterType="int" resultType="String">
		select board_pwd from board where board_no = #{board_no}
	</select>
	
	<!-- 게시글 번호 수정 -->
	<update id="updateSeq">
		<![CDATA[update board set board_no = board_no - 1 
				  where board_no > #{board_no}]]>
	</update>
	
	<!-- 검색 게시글 수 가져오기 -->
	<select id="writer_cnt" resultType="int">
		<![CDATA[select count(*) from board where board_writer like '%'||#{keyword}||'%']]>
	</select>
	<select id="title_cnt" resultType="int">
		<![CDATA[select count(*) from board where board_title like '%'||#{keyword}||'%']]>
	</select>
	<select id="content_cnt" resultType="int">
		<![CDATA[select count(*) from board where board_cont like '%'||#{keyword}||'%']]>
	</select>
	
	<!-- 검색 게시글 가져오기 -->
	<select id="writer" parameterType="pageDto" resultType="boardDto">
		<![CDATA[select * 
			 	   from (select b.*
			                  , row_number() over(order by board_no desc) rnum
			               from board b
			              where board_writer like '%'||#{keyword}||'%')
				          where rnum >= ${startNo} and rnum <= ${endNo} ]]>
	</select>
	
	<select id="title" parameterType="pageDto" resultType="boardDto">
		<![CDATA[select * 
			 	   from (select b.*
			                  , row_number() over(order by board_no desc) rnum
			               from board b
			              where board_title like '%'||#{keyword}||'%')
				          where rnum >= ${startNo} and rnum <= ${endNo} ]]>
	</select>
	
	<select id="content" parameterType="pageDto" resultType="boardDto">
		<![CDATA[select * 
			 	   from (select b.*
			                  , row_number() over(order by board_no desc) rnum
			               from board b
			              where board_cont like '%'||#{keyword}||'%')
				          where rnum >= ${startNo} and rnum <= ${endNo} ]]>
	</select>
</mapper>